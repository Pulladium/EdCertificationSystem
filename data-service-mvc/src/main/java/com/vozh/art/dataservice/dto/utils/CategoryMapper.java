package com.vozh.art.dataservice.dto.utils;

import com.vozh.art.dataservice.dto.request.CategoryRequest;
import com.vozh.art.dataservice.dto.response.CategoryResponse;
import com.vozh.art.dataservice.entity.Category;
import com.vozh.art.dataservice.service.CategoryService;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.stream.Collectors;

@Component
public final class CategoryMapper {
//    private CategoryMapper instance;


    public static CategoryResponse mapToResponse(Category category, int depth) {
        if (category == null || depth < 0) {
            return null;
        }
//        /

        CategoryResponse.CategoryResponseBuilder builder = CategoryResponse.builder()
                .name(category.getName())
                .categoryId(category.getId())
                .description(category.getDescription());

        builder.parentCategoryId(category.getParentCategory() == null ? null : category.getParentCategory().getId());

        if (depth > 0) {

            builder.subCategories(category.getSubCategories() != null ?
                    category.getSubCategories().stream()
                            .map(sub -> mapToResponse(sub, depth - 1))
                            .collect(Collectors.toSet()) : new HashSet<>());

        }

        return builder.build();
    }

    public static Category mapToCategoryEntity(CategoryRequest request, CategoryService categoryService) {
        if(request == null){
            throw new IllegalArgumentException("Request is null");
        }
        //if id is null will be generated by db, else updates existing
        Category catFromRequest = Category.builder()
                .id(request.getId())
                .name(request.getName())
                .description(request.getDescription())
                .build();

        if(request.getParentCategoryId() != null){
            catFromRequest.setParentCategory(categoryService.getCategoryById(request.getParentCategoryId()));
        }

        if(request.getSubCategories() != null){
            catFromRequest.setSubCategories(request.getSubCategories().stream()
                    .map(subCat -> mapToCategoryEntity(subCat, categoryService))
                    .collect(Collectors.toSet()));
        }
        return catFromRequest;

    }
}
